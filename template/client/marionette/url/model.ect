<% 
Model = @Model
model = Model.toLowerCase()
%>
model = require '../../model.coffee'
controller = require '../controller/<%= model %>.coffee'
vent = require '../../vent.coffee'
_ = require 'underscore'
Backbone = require 'backbone'
Marionette = require 'backbone.marionette'

class Router extends Backbone.Router
	routes:
		'<%= model %>/list':		'list'
		'<%= model %>/create':		'create'
		'<%= model %>/read/:id':	'read'
		'<%= model %>/update/:id':	'update'
		
	constructor: (opts = {}) ->
		@collection = new model.<%= Model %>s()
		@listView = new controller.<%= Model %>SearchView {el: opts.el, collection: @collection}
		@createView = new controller.<%= Model %>CreateView {el: opts.el, model: new model.<%= Model %>s({}, {collection: @collection})}
		@readView = new controller.<%= Model %>ReadView {el: opts.el, model: new model.<%= Model %>s({}, {collection: @collection})}
		@updateView = new controller.<%= Model %>UpdateView {el: opts.el, model: new model.<%= Model %>s({}, {collection: @collection})}
	
		vent.on '<%= model %>:selected', (<%= model %>) =>
			@read <%= model %>.id
			
		super(opts)
			
	list: ->
		@listView.render()
		@listView.collection.getFirstPage(reset: true)
			
	create: ->
		@createView.render()
		
	read: (id) ->
		@readView.model.set {_id: id}, {silent: true}
		@readView.model.fetch()
		
	update: (id) ->
		@updateView.model.set {_id: id}, {silent: true}
		@updateView.model.fetch()
		
module.exports =
	Router:		Router